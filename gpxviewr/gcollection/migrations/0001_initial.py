# Generated by Django 5.2.1 on 2025-06-08 14:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.gis.geos.point
import django.core.files.storage
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import django_extensions.db.fields
import gcollection.models.gcollection_share
import pathlib
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GCollectionWayPointType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image_name', models.CharField(max_length=30)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('bounds', models.JSONField(blank=True, null=True)),
                ('date', models.DateField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gcollections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GCollectionGPXFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('date', models.DateField(db_index=True)),
                ('job_status', models.IntegerField(choices=[(1, 'uploaded'), (10, 'processed'), (99, 'error')], default=1)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location=pathlib.PurePosixPath('/workspace/gpxviewr/storage-fs')), upload_to='gcollection_gpx_file/%Y/%m/%d/')),
                ('distance', models.FloatField(blank=True, null=True)),
                ('ascent', models.FloatField(blank=True, null=True)),
                ('descent', models.FloatField(blank=True, null=True)),
                ('bounds', models.JSONField(blank=True, null=True)),
                ('gcollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gpx_files', to='gcollection.gcollection')),
            ],
            options={
                'ordering': ['date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GcollectionShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('slug', models.SlugField(default=gcollection.models.gcollection_share.generate_slug_token, editable=False, unique=True)),
                ('valid_until_date', models.DateField()),
                ('gcollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='gcollection.gcollection')),
            ],
        ),
        migrations.CreateModel(
            name='GCollectionWayPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(default=django.contrib.gis.geos.point.Point(0.0, 0.0), srid=4326)),
                ('gcollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waypoints', to='gcollection.gcollection')),
                ('waypoint_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='waypoints', to='gcollection.gcollectionwaypointtype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddConstraint(
            model_name='gcollection',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('user'), name='user_name_unique'),
        ),
        migrations.AddConstraint(
            model_name='gcollectiongpxfile',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('gcollection'), name='file_gcollection_name_unique'),
        ),
    ]
